(()=>{var t={147:t=>{t.exports=(t=null,e=null,r=null)=>({value:t,left:e,right:r})}},e={};function r(l){var i=e[l];if(void 0!==i)return i.exports;var o=e[l]={exports:{}};return t[l](o,o.exports,r),o.exports}(()=>{const t=r(147),e=new class{constructor(t){const e=[...new Set(t)].sort(((t,e)=>t-e));this.root=this.buildTree(e)}buildTree(e){if(0===e.length)return null;let r=Math.floor(e.length/2),l=t(e[r]);return l.left=this.buildTree(e.slice(0,r)),l.right=this.buildTree(e.slice(r+1)),l}insert(e,r=this.root){return null===r?t(e):r.value!==e?(r.value<e?r.right=this.insert(e,r.right):r.left=this.insert(e,r.left),r):void 0}delete(t,e=this.root){return null===e?null:e.value===t?this.#t(e):(e.value>t?e.left=this.delete(t,e.left):e.value<t&&(e.right=this.delete(t,e.right)),e)}#t(t){if(t.left&&t.right){const e=this.#e(t.right);return t.value=e.value,t.right=this.delete(e.value,t.right),t}{const e=t.right||t.left;return t=null,e}}#e(t){for(;t.left;)t=t.left;return t}find(t,e=this.root){return null===e?null:e.value>t?this.find(t,e.left):e.value<t?this.find(t,e.right):e}levelOrder(t){let e=this.root,r=[e],l=[];for(console.log(r);0!==r.length;)e=r.shift(),l.push(e.value),null!==e.left&&r.push(e.left),null!==e.right&&r.push(e.right);return l}inorder(t,e=this.root,r=[]){if(null!==e)return this.inorder(t,e.left,r),r.push(e.value),this.inorder(t,e.right,r),r}postorder(t,e=this.root,r=[]){if(null!==e)return this.postorder(t,e.left,r),this.postorder(t,e.right,r),r.push(e.value),r}preorder(t,e=this.root,r=[]){if(null!==e)return r.push(e.value),this.preorder(t,e.left,r),this.preorder(t,e.right,r),r}height(t=this.root){if(null===t)return 0;let e=this.height(t.left),r=this.height(t.right);return Math.max(e,r)+1}depth(t){let e=this.root,r=0;if(null===e)return 0;for(;e.value!==t;)r++,e.value>t?e=e.left:e.value<t&&(e=e.right);return r}isBalanced(t=this.root){let e=this.height(t.left),r=this.height(t.right);return!(Math.abs(e-r)>=2)}rebalance(t=this.root){if(this.isBalanced())return"This binary tree is already balanced";var e=this.inorder(t);return this.root=this.buildTree(e)}prettyPrint=(t=this.root,e="",r=!0)=>{null!==t&&(null!==t.right&&this.prettyPrint(t.right,`${e}${r?"│   ":"    "}`,!1),console.log(`${e}${r?"└── ":"┌── "}${t.value}`),null!==t.left&&this.prettyPrint(t.left,`${e}${r?"    ":"│   "}`,!0))}}([5,4,1,3,2,5,6]);e.insert(7),e.insert(10),e.insert(25),e.insert(8),e.prettyPrint(),e.find(2),console.log(e.levelOrder()),console.log(e.inorder()),console.log(e.postorder()),console.log(e.preorder()),console.log(e.height()),console.log(e.depth(25)),console.log(e.isBalanced()),console.log(e.rebalance()),e.prettyPrint()})()})();